var router = require('express').Router();
// 이렇게 쓰시면 다른 파일을 불러올 수 있습니다. 그 불러온 파일이 내뿜은 변수를 가져다 쓸 수 있습니다. 
// (혹은 파일경로 대신 npm으로 설치한 라이브러리 명을 써도 됩니다)
// 근데 파일경로는 항상 ./ 부터 시작합니다. 이 쩜슬래시 기호는 현재경로라는 뜻입니다. 
// 자바스크립트 신문법인 import / export 문법으로 바꿔서 쓸 수 도 있습니다. 그건 알아서 하십시오.

//미들웨어 적용해보기
function 로그인했니(요청, 응답, next) {   //요청.user 가 있으면 next()로 통과시켜주고요, 없으면 에러메세지를 응답.send() 해주세요~" 라는 뜻
    if (요청.user) {  
      console.log(요청.user)
      console.log('확인용')
      next() 
    } 
    else { 
      응답.send('로그인안하셨는데요?') 
    } 
  } 

//모든 url에 적용할 미들웨어를 괄호안에 적는다.   
router.use('/shirts', 로그인했니);


// router.get('/shirts',로그인했니, function(요청, 응답){   //안에 로그인했니가 들어가있다고 보면된다. 
//     응답.send('셔츠 파는 페이지입니다.');
//  });
router.get('/shirts', function(요청, 응답){   //안에 로그인했니가 들어가있다고 보면된다. 즉, 위랑 같은 것!
   응답.send('셔츠 파는 페이지입니다.');
});

//중복되는 것 피해보기
router.get('/pants', function(요청, 응답){
   응답.send('바지 파는 페이지입니다.');
}); 

module.exports = router;   //Node.js 환경에서 JS파일들을 불러와서 쓸 수 있는데 그 문법이 바로 require() 이것과 module.exports 이것입니다. 
//JS파일 하단에 이렇게 쓰시면 다른곳에서 쓸 수 있게 변수를 내뿜어줄 수 있습니다.

// express라는 라이브러리가 제공하는 Router() 기능을 가져다 쓰고 있는 것
// 그냥 라우트들을 관리할 수 있게 도와주는 일종의 함수이며
// 이 함수의 도움을 받으면 이전에 app.get()하던 형식 똑같이 그대로 shop.js파일에도 작성 가능.
// 방금 만든 것 처럼 URL route들을 이리저리 안내해주는 파일을 라우터라고 칭하며
// 그리고 파일 최하단에서 작성한 라우터를 module.exports 라는 문법을 이용해 배출해줍니다. 
// 그럼 이제 이 라우터를 server.js에 적용하는 일만 남았습니다.  