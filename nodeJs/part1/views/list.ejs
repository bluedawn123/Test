<!-- ejs는 views안에 !!! -->

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <link rel="stylesheet" href="/public/main.css">



    <title>Hello, world!</title>
  </head>
  <body>

    <%- include('nav2.html') %>
<!-- -------------------------------------------------------------------------------------------------------------------------->

      <div class="container input-group mb-2" >
        <input class="form-control" id="search-input" >
        <button class="input-group-append btn btn-button" id="search">검색</button>
      </div>



<!-- -------------------------------------------------------------------------------------------------------------------------->
      <!-- 여기 posts는 server.js 참조. -->
<!--  <h4>할 일 제목 : <%= posts[0].제목 %></h4>
      <h4>할 일 날짜 : <%= posts[0].날짜 %></h4>     이런식으로 매번 할 수 없으니 반복문으로 바꿔보자 -->

    <h4 class="ml-2 my-3 text-center">서버에서 가져온 한 일 리스트</h4>

    <div class="container">
      <ul class="list-group">
        <% for (var i = 0; i < posts.length; i++){ %>  
          <!-- posts는 { _id: 13, '제목': '알하기 쉬기', '날짜': '111' }, 이런식으로 어레이 안에 오브젝트가 있으므로
          그것의 갯수를 세어 주려면 posts.length로 해야한다. -->
          
          <li class="list-group-item">
            <h4> 오늘 한 일 : <%= posts[i].제목 %> </h4>
            <p> 글 작성자 : <%= posts[i].작성자 %></p>
            <p> 날짜 : <%= posts[i].날짜 %> </p>
            <p> 글 번호 : <%= posts[i]._id %> </p>
            <p class="card-text"><%= posts[i].내용 %></p>

            <button class="btn btn-dark edit">수정하기</button>  <!--아직 기능 개발 전-->
            <button class="btn btn-secondary chat" data-id= "<%= posts[i].작성자 %>">채팅하기</button>   <!-- 작성자아이디를 숨겨서 아래로 보냄. -->
            <button class="btn btn-danger delete" data-id= "<%= posts[i]._id %>">삭제하기</button>   <!-- data-id는 숫자로 11, 13 이런것들을 숨겨서 보낸다. -->


          </li>

        <% } %>
      </ul>
    </div>

<!-- -------------------------------------------------------------------------------------------------------------------- -->
      <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>


<!-- ------------------------------------------------------채팅 기능 관련---------------------------------------------------- -->
<!--  list.ejs 파일엔 작성자 정보가 숨겨진 버튼을 추가 -> 그 버튼 누르면 post 요청을 보내달라고 코드작성 -> post 요청시 현재 글 작성한 유저의 _id까지 실어서 보냅  -->
      
      <script>
        $('.chat').click(function(e){         //chat버튼 누르면
          var _id = e.target.dataset.id;      //글쓴이 유저 _id를 가져온다.  data-id= posts[i].작성자 에서 보낸것!
          console.log(_id) 
          
          $.post('/chatroom', {당한사람id : _id})  //chatroom으로 post요청하고 id를 서버로 보냄. 
          .then( ()=>{
            console.log('채팅방 게시물 생성완료')
          })
        });
      </script>
  


      
      <script>
// ------------------------------------------------------------삭제 관련 ---------------------------------------------------------
//서버에 AJAX DELETE요청 날려주세요~
      $('.delete').click(function(e){    //클래스가 delete를 클릭하면, 아래 코드(삭제하는)실행

        var 글번호 = e.target.dataset.id;   //e.target = 실제 누른것, + dataset.id=숨겨져있는 data-id의 값. 즉, 내가 누른 요소의 data-id의미 (11, 13등)
        var 지금누른거 = $(this);           //this = 지금이벤트가 동작하는 곳

        $.ajax({                        //보통 3가지를 같이 적는다. 
          method : 'DELETE',
          url : '/delete',              //'경로',
          data : {_id : 글번호 },       //'요청보낼 때 삭제할 게시물 번호(보낼 데이터) 전송',(1, 13 이런것들). 즉, 삭제버튼을 눌렀을때 그것을 삭제해야한다
        }).done(function(결과){         //성공시 함수 실행

          console.log('삭제성공했어욤');

          //삭제버튼을 눌렀을때 삭제버튼을 누른 <li>요소를 안보이게 해주세요.
          지금누른거.parent('li').fadeOut();   //지금누른요소의 부모요소인 li태그를 fadeOut시킨다.
        
          }).fail(function(a, b, c){    
            console.log(a, b, c);

        });
    
      })



//검색기능 관련-------------------------------------------------------------------------------------------------------------------------->

// <!-- 검색기능 ==> queryString을 요청받으면 해당 제목을 가진 게시물을 DB에서 찾아서 보내주는 방식
//         1.검색버튼 누르면 서버에게 요청
//         2.서버는 db에서 데이터꺼내줌
//         3. ejs파일로 보내줘고 끝
//        -->


      //queryString 방식
      //검색버튼 누르면 서버로 get요청 + queryString으로 정보전달 => queryString을 요청받으면 해당 제목을 가진 게시물을 DB에서 찾아서 보내주는 방식
      
      $('#search').click(function(){             //search 버튼 누르면 이하 코드 실행
        var 입력한값 = $('#search-input').val()   //<input>에 유저가 입력한 값
        window.location.replace('/search?value=' + 입력한값)   
        //url을 바꿔주는 함수(get요청이랑 같음)  //('/search?value=') => 버튼을누르면 search~~~~~로 이동함. value =사용자가입력한값 형식으로해야함

        //여기까지 하면 url 주소가 search?value=똥싸기  이런식으로 바뀐다. 중요한 것은 server.js
      })


      </script>


    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <!-- <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
  </body>
</html>