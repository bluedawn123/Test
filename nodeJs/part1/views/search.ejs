<!-- list ejs와는 다르게 찾아서 나온 것들만 결과로 보여준다! -->
<!-- ejs는 views안에 !!! -->

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <link rel="stylesheet" href="/public/main.css">



    <title>Hello, world!</title>
  </head>
  <body>
    <!-- <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Todo app</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav">
            <li class="nav-item active">
              <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/write">Write</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">임시</a>
            </li>

          </ul>
        </div>
      </nav> -->

      <%- include('nav2.html') %>
<!-- -------------------------------------------------------------------------------------------------------------------------->

      <!-- 검색기능 ==> queryString을 요청받으면 해당 제목을 가진 게시물을 DB에서 찾아서 보내주는 방식
        1.검색버튼 누르면 서버에게 요청
        2.서버는 db에서 데이터꺼내줌
        3. ejs파일로 보내줘고 끝
       -->

      <div class="container input-group mb-2" >
        <input class="form-control" id="search-input" >
        <button class="input-group-append btn btn-button" id="search">검색</button>
      </div>







<!-- -------------------------------------------------------------------------------------------------------------------------->
      <!-- 여기 posts는 server.js 참조. 아래 이상한 괄호는 그냥 ejs식 주석처리 한거임-->
<% /* %>  
      <h4>할 일 제목 : <%= posts[0].제목 %></h4>
      <h4>할 일 날짜 : <%= posts[0].날짜 %></h4>     이런식으로 매번 할 수 없으니 반복문으로 바꿔보자 주석 끝 <% */ %>



    <h4 class="ml-2 my-3 text-center">서버에서 가져온 할 일 리스트</h4>
    <div class="container">
      <ul class="list-group">
        <% for (var i = 0; i < posts.length; i++){ %>
        <li class="list-group-item">
          <h4> 할일 제목 : <%= posts[i].제목 %> </h4>
          <p> 할일 마감날짜 : <%= posts[i].날짜 %> </p>
          <p> 글 번호 : <%= posts[i]._id %> </p>
          <button class="btn btn-danger delete" data-id="<%= posts[i]._id %>">삭제</button>
        </li>
        <% } %>
      </ul>
    </div>

<!-- -------------------------------------------------------------------------------------------------------------------- -->


      <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>



      <script>
      
      $('.delete').click(function(e){    //클래스가 delete를 클릭하면, 아래 코드(삭제하는)실행

        var 글번호 = e.target.dataset.id;   //e.target=실제 누른것, + dataset.id=숨겨져있는 data-id의 값. 즉, 내가 누른 요소의 data-id의미
        var 지금누른거 = $(this);           //this = 지금이벤트가 동작하는 곳

        $.ajax({                        //보통 3가지를 같이 적는다. 
          method : 'DELETE',
          url : '/delete',              //'경로',
          data : {_id : 글번호 },                 //'요청과 함께 보낼 데이터',. 즉, 삭제버튼을 눌렀을때 그것을 삭제해야한다
        }).done(function(결과){         //성공시 함수 실행

          console.log('삭제성공했어욤');

          //삭제버튼을 눌렀을때 삭제버튼을 누른 <li>요소를 안보이게 해주세요.
          지금누른거.parent('li').fadeOut();   //지금누른요소의 부모요소인 li태그를 fadeOut시킨다.
            
        
        
          }).fail(function(a, b, c){    
            console.log(a, b, c);

        });
    
      })



//검색기능 관련-------------------------------------------------------------------------------------------------------------------------->

      //queryString 방식
      //검색버튼 누르면 서버로 get요청 + queryString으로 정보전달 => queryString을 요청받으면 해당 제목을 가진 게시물을 DB에서 찾아서 보내주는 방식
      
      $('#search').click(function(){             //search 버튼 누르면 이하 코드 실행
        var 입력한값 = $('#search-input').val()   //<input>에 유저가 입력한 값
        window.location.replace('/search?value=' + 입력한값)   
        //url을 바꿔주는 함수(get요청이랑 같음)  //('/search?value=') => 버튼을누르면 search~~~~~로 이동함. value =사용자가입력한값 형식으로해야함

        //여기까지 하면 url 주소가 search?value=똥싸기  이런식으로 바뀐다. 중요한 것은 server.js
      })

    //   //다른 방식으로 queryString을 만들수도 있다. 
    //   //방법2
    //   var 자료 = { 이름 : '값', 이름2 : '값2'}
    //   var 자료확인 = $.param(자료)
    //   console.log(자료확인)              //이럼 자동으로 queryString화
      
    //   //방법3
    //   var 자료2 = $(폼태그).serialize()   //이럼 자동으로 queryString화








      </script>


    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <!-- <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
  </body>
</html>