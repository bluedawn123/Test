// @use => 불러오기 기능. 단 맨 처음 사용되어져야한다.
// @use 다른 파일에 있는 내용을 가져오고 싶을때 @use '경로'
@use '_usetest';



//1. 변수처럼 사용하기
$main-color : #3e57a3;
$main-size : 20px;
$sub-color : rgba(33, 16, 109, 0.603);

.background{
    background-color: $main-color;
    font-size : ($main-size / 2);
}




//2. 네스팅 문법 : 별거없다..ㅋ
.main-bg1{
    h4{
        font-size : 16px;
    }
    button{
        color: red;
    }
}




// 3. %와 extend 사용하기. %로 클래스만들어서 사용한다고 생각
// %는 임시클래스이므로 컴파일시 사라진다. (종속돼서 사용되는 경우만 가능)
// 예를들어, 여러 버튼을 만드는데 중복이 많은 경우,
%btn {
    width: 100px;
    height: 60px;
    padding : 20px;
}

.btn-black{
    @extend %btn;
    color: rgb(43, 8, 8);
}

.btn-green{
    @extend %btn;
    color: rgb(68, 112, 68);
}  

// 4. @mixin = 함수처럼 쓰면 된다.
// 공통된 것들을 class로 묶고 @mixin을 써준다.
h2{
    font-size: 30px;
    letter-spacing: 3px;
}

h3{
    font-size: 20px;
    letter-spacing: 2px;
}
h4{
    font-size: 40px;
    letter-spacing: 2px;
}


//이거를 mixin으로 지정하고, @include로 소환한다.
//다른 파라미터들을 조절하고 싶을때는 ($파라미터)를 사용한다.
//다른 파일에 있던 변수를 쓰려면, 파일명.$변수 를 써야한다.
@mixin 폰트스타일($param1, $param2) {   //이렇게 함수화 시키고
    font-size: $param1;
    letter-spacing: $param2;
}

h5{  
    @include 폰트스타일(150px, 15px);  //이렇게 사용한다. 사용시는 @include 필요
    color: usetest.$main-color;       //usetest파일의 main-color를 사용하겠다!
}

h4{
    @include 폰트스타일(30px, 17px);


}

